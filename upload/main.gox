package main

import (
	"encoding/base64"
	"fmt"
	"io/ioutil"
	//"reflect"
	"database/sql"
	"strings"

	_ "github.com/go-sql-driver/mysql"
)

const (
	dbUser    = "root"
	dbPass    = ""
	dbName    = "disenadorlogodb"
	dbCharset = "utf8"
)

func main() {
	datos := [][]string{}
	var contadorFill int
	var contadorComilla int
	directorioPrincipal, err := ioutil.ReadDir("./iconos")

	if err != nil {
		fmt.Println(err)
	} else {
		for _, categoria := range directorioPrincipal {

			nombreCat := categoria.Name()

			svgs, errCat := ioutil.ReadDir("./iconos/" + nombreCat)

			if errCat != nil {

				fmt.Println(errCat)

			} else {

				for _, svg := range svgs {

					contenido, errSvg := ioutil.ReadFile("./iconos/" + nombreCat + "/" + svg.Name())
					if errSvg != nil {
						fmt.Println("./iconos/" + nombreCat + "/" + svg.Name())
					} else {


						svgBase64 := base64.StdEncoding.EncodeToString([]byte(string(contenido)))

						var contenidoSVG = strings.SplitN(string(contenido), ">", 2)[0]

						cadenaArray := strings.SplitN(contenidoSVG, "<svg fill=\"", 2)

						if len(cadenaArray) > 1 {
							cadenaSucia := cadenaArray[1]
							colorArray := strings.SplitN(cadenaSucia, "\"", 2)

							if len(colorArray) > 1 {

								color := colorArray[0]

								//fmt.Println([]string{nombreCat, color, svgBase64})
								/*fmt.Println(nombreCat)
								fmt.Println(color)
								fmt.Println("//////")
								fmt.Println()
								fmt.Println()*/

								datos = append(datos, []string{nombreCat, color, svgBase64})

							} else {
								contadorComilla++
							}

						} else {
							contadorFill++
							datos = append(datos, []string{nombreCat, "#000000", svgBase64})
						}

					}
				}
			}

		}

	}
	/*
		archivoCSV, err := os.Create("iconos.csv")

		if err != nil {
			fmt.Println(err)
		} else {

			defer archivoCSV.Close()
			writer := csv.NewWriter(archivoCSV)

			writer.WriteAll(datos)

			if err := writer.Error(); err != nil {
				fmt.Println("err")
			}

		}

	*/

	db, err := sql.Open("mysql", dbUser+":"+dbPass+"@/"+dbName+"?charset="+dbCharset)
	if err != nil {
		fmt.Println("error en abrir la bd")
	}
	defer db.Close()

	for _, icono := range datos {

		var idCategoria int

		err = db.QueryRow("SELECT idCategoria FROM categorias WHERE nombreCategoria = ?", icono[0]).Scan(&idCategoria)
		if err != nil {
			fmt.Println("seleccionado id de categoria")
		}

		stmt, err := db.Prepare("INSERT INTO elementos(nombre,  color, svg, tipo, comprado, categorias_idCategoria ) VALUES(?,?,?, 'ICONO', 0, ?)")
		if err != nil {
			fmt.Println("error en preparacion")
		}

		res, err := stmt.Exec(icono[0], icono[1], icono[2], idCategoria)
		if err != nil {
			fmt.Println(idCategoria)
			//fmt.Println(err)
		} else {
			_ = res
			fmt.Println("bien")
		}
	}
}
